% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/step_add_levels.R
\name{step_add_levels}
\alias{step_add_levels}
\alias{tidy.step_add_levels}
\title{Add levels to nominal variables}
\usage{
step_add_levels(recipe, ..., role = NA, trained = FALSE, cols = NULL,
  levels = c("other", "hcai_missing"))

\method{tidy}{step_add_levels}(x, ...)
}
\arguments{
\item{recipe}{recipe object. This step will be added}

\item{...}{One or more selector functions}

\item{role}{Ought to be nominal}

\item{trained}{Has the recipe been prepped?}

\item{cols}{columns to be prepped}

\item{levels}{Factor levels to add to variables. Default = c("other",
"hcai_missing"). If new values are observed in baking vs. prep, they will
be replaced with the first value of this argument (i.e. "other" by
default).}

\item{x}{A `step_add_levels` object.}
}
\value{
Recipe with the new step
}
\description{
Adds levels to factor variables. If baking data contains factor
  levels unobserved in prep, they will be converted to the first value in the
  "levels" arguement ("other" by default). This provides protection against
  the common problem of factor levels in prediction that were unobserved in
  training.
}
\examples{
library(recipes)
d <- data.frame(num = 1:30,
                has_missing = c(rep(NA, 10), rep('b', 20)),
                has_rare = c("rare", rep("common", 29)),
                has_both = c("rare", NA, rep("common", 28)),
                has_neither = c(rep("cat1", 15), rep("cat2", 15)))
rec <- recipe( ~ ., d) \%>\%
  step_add_levels(all_nominal()) \%>\%
  prep(training = d)
baked <- bake(rec, d)
lapply(d[, sapply(d, is.factor)], levels)
lapply(baked[, sapply(baked, is.factor)], levels)
}
