% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/linear-mixed-model-deployment.R
\docType{class}
\name{LinearMixedModelDeployment}
\alias{LinearMixedModelDeployment}
\title{Deploy a production-ready predictive Linear Mixed Model model}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
LinearMixedModelDeployment(type, df, 
grainCol, personCol, testWindowCol, predictedCol, impute, debug)
}
\arguments{
\item{type}{The type of model (either 'regression' or 'classification')}

\item{df}{Dataframe whose columns are used for calc.}

\item{grainCol}{Optional. The dataframe's column that has IDs pertaining to 
the grain. No ID columns are truly needed for this step.}

\item{personCol}{The data frame's columns that represents the patient/person}

\item{testWindowCol}{Y or N. This column dictates the split between model 
training and test sets. Those rows with N in this column indicate the 
training set while those that have Y indicate the test set}

\item{predictedCol}{Column that you want to predict. If you're doing
classification then this should be Y/N.}

\item{impute}{For training df, set all-column imputation to F or T.
This uses mean replacement for numeric columns
and most frequent for factorized columns.
F leads to removal of rows containing NULLs.}

\item{debug}{Provides the user extended output to the console, in order
to monitor the calculations throughout. Use T or F.}
}
\description{
This step allows one to
\itemize{
\item Load a saved model from \code{\link{LinearMixedModelDevelopment}}
\item Run the model against test data to generate predictions
\item Push these predictions to SQL Server
}
The linear mixed model functionality works best with data sets having fewer
than 10,000 rows.
}
\examples{

#### Classification Example using csv data ####
## 1. Loading data and packages.
ptm <- proc.time()
library(healthcareai)

# setwd('C:/Yourscriptlocation/Useforwardslashes') # Uncomment if using csv

# Can delete this line in your work
csvfile <- system.file("extdata", 
                       "HCRDiabetesClinical.csv", 
                       package = "healthcareai")

# Replace csvfile with 'path/file'
df <- read.csv(file = csvfile, 
               header = TRUE, 
               na.strings = c("NULL", "NA", ""))

head(df)
str(df)

## 2. Train and save the model using DEVELOP
inTest <- df$InTestWindowFLG # save this for later.
df$InTestWindowFLG <- NULL

set.seed(42)
p <- SupervisedModelDevelopmentParams$new()
p$df <- df
p$type <- "classification"
p$impute <- TRUE
p$grainCol <- "PatientEncounterID"
p$personCol <- "PatientID"
p$predictedCol <- "ThirtyDayReadmitFLG"
p$debug <- FALSE
p$cores <- 1

# Run Linear Mixed Model
LinearMixedModel <- LinearMixedModelDevelopment$new(p)
LinearMixedModel$run()

## 3. Load saved model and use DEPLOY to generate predictions. 
df$InTestWindowFLG <- inTest
p2 <- SupervisedModelDeploymentParams$new()
p2$type <- "classification"
p2$df <- df
p2$testWindowCol <- "InTestWindowFLG"
p2$grainCol <- "PatientEncounterID"
p$personCol <- "PatientID"
p2$predictedCol <- "ThirtyDayReadmitFLG"
p2$impute <- TRUE
p2$debug <- FALSE
p2$cores <- 1
p2$writeToDB <- FALSE

dL <- LinearMixedModelDeployment$new(p2)
dL$deploy()

df <- dL$getOutDf()
# Write to CSV (or JSON, MySQL, etc) using plain R syntax
# write.csv(df,'path/predictionsfile.csv')

print(proc.time() - ptm)

\donttest{
#### Classification example using SQL Server data ####
# This example requires you to first create a table in SQL Server
# If you prefer to not use SAMD, execute this in SSMS to create output table:
# CREATE TABLE dbo.HCRDeployClassificationBASE(
#   BindingID float, BindingNM varchar(255), LastLoadDTS datetime2,
#   PatientEncounterID int, <--change to match inputID
#   PredictedProbNBR decimal(38, 2),
#   Factor1TXT varchar(255), Factor2TXT varchar(255), Factor3TXT varchar(255)
# )

## 1. Loading data and packages.
ptm <- proc.time()
library(healthcareai)

connection.string <- "
driver={SQL Server};
server=localhost;
database=SAM;
trusted_connection=true
"

query <- "
SELECT
[PatientEncounterID]
,[PatientID]
,[SystolicBPNBR]
,[LDLNBR]
,[A1CNBR]
,[GenderFLG]
,[ThirtyDayReadmitFLG]
,[InTestWindowFLG]
FROM [SAM].[dbo].[HCRDiabetesClinical]
"

df <- selectData(connection.string, query)

head(df)
str(df)

## 2. Train and save the model using DEVELOP
#' set.seed(42)
inTest <- df$InTestWindowFLG # save this for deploy
df$InTestWindowFLG <- NULL

p <- SupervisedModelDevelopmentParams$new()
p$df <- df
p$type <- "classification"
p$impute <- TRUE
p$grainCol <- "PatientEncounterID"
p$personCol <- "PatientID"
p$predictedCol <- "ThirtyDayReadmitFLG"
p$debug <- FALSE
p$cores <- 1

# Run Linear Mixed Model
LinearMixedModel <- LinearMixedModelDevelopment$new(p)
LinearMixedModel$run()

## 3. Load saved model and use DEPLOY to generate predictions. 
df$InTestWindowFLG <- inTest # put InTestWindowFLG back in.

p2 <- SupervisedModelDeploymentParams$new()
p2$type <- "classification"
p2$df <- df
p2$grainCol <- "PatientEncounterID"
p$personCol <- "PatientID"
p2$testWindowCol <- "InTestWindowFLG"
p2$predictedCol <- "ThirtyDayReadmitFLG"
p2$impute <- TRUE
p2$debug <- FALSE
p2$cores <- 1
p2$sqlConn <- connection.string
p2$destSchemaTable <- "dbo.HCRDeployClassificationBASE"

dL <- LinearMixedModelDeployment$new(p2)
dL$deploy()

print(proc.time() - ptm)
}

\donttest{
#### Regression Example using SQL Server data ####
# This example requires you to first create a table in SQL Server
# If you prefer to not use SAMD, execute this in SSMS to create output table:
# CREATE TABLE dbo.HCRDeployRegressionBASE(
#   BindingID float, BindingNM varchar(255), LastLoadDTS datetime2,
#   PatientEncounterID int, <--change to match inputID
#   PredictedValueNBR decimal(38, 2),
#   Factor1TXT varchar(255), Factor2TXT varchar(255), Factor3TXT varchar(255)
# )

## 1. Loading data and packages.
ptm <- proc.time()
library(healthcareai)

connection.string <- "
driver={SQL Server};
server=localhost;
database=SAM;
trusted_connection=true
"

query <- "
SELECT
[PatientEncounterID]
,[PatientID]
,[SystolicBPNBR]
,[LDLNBR]
,[A1CNBR]
,[GenderFLG]
,[ThirtyDayReadmitFLG]
,[InTestWindowFLG]
FROM [SAM].[dbo].[HCRDiabetesClinical]
"

df <- selectData(connection.string, query)

head(df)
str(df)

## 2. Train and save the model using DEVELOP
#' set.seed(42)
inTest <- df$InTestWindowFLG # save this for deploy
df$InTestWindowFLG <- NULL

p <- SupervisedModelDevelopmentParams$new()
p$df <- df
p$type <- "regression"
p$impute <- TRUE
p$grainCol <- "PatientEncounterID"
p$personCol <- "PatientID"
p$predictedCol <- "A1CNBR"
p$debug <- FALSE
p$cores <- 1

# Run Linear Mixed Model
LinearMixedModel <- LinearMixedModelDevelopment$new(p)
LinearMixedModel$run()

## 3. Load saved model and use DEPLOY to generate predictions. 
df$InTestWindowFLG <- inTest # put InTestWindowFLG back in.

p2 <- SupervisedModelDeploymentParams$new()
p2$type <- "regression"
p2$df <- df
p2$grainCol <- "PatientEncounterID"
p$personCol <- "PatientID"
p2$testWindowCol <- "InTestWindowFLG"
p2$predictedCol <- "A1CNBR"
p2$impute <- TRUE
p2$debug <- FALSE
p2$cores <- 1
p2$sqlConn <- connection.string
p2$destSchemaTable <- "dbo.HCRDeployRegressionBASE"

dL <- LinearMixedModelDeployment$new(p2)
dL$deploy()

print(proc.time() - ptm)
}
}
\seealso{
\code{\link{healthcareai}}
}
\keyword{datasets}
