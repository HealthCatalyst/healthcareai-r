% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/common-impact-coding.R
\name{pphcv}
\alias{pphcv}
\title{Pre-Process High-Cardinality Variables}
\usage{
pphcv(df, target = NULL, high_card, type, pos_class = NULL,
  m_tuning_param = NULL, multi_base = NULL, remove_high_card = FALSE,
  mapping = NULL)
}
\arguments{
\item{df}{A data frame that contains the high-cardinality variable/s and an 
outcome/target variable of interest.}

\item{target}{The variable target/outcome of interest. Enter as a string. 
Only used for training data.}

\item{high_card}{The high-cardinality variable/s. Enter as a string or vector
of strings, i.e. c("variable1", "variable2", "variable3")}

\item{type}{What type of variable is the target? Options are "binary",
"continuous", and "multiclass". Enter as a string.}

\item{pos_class}{If target is binary, what is the positive class? Enter as a 
string for a factor or character target and a number for a numeric target.}

\item{m_tuning_param}{A tuneable parameter that depends on the data domain 
and expected noise. If the expected noise is small, m should be small and 
vice versa. Defaults to 1. Not used when applying mappings to testing data.}

\item{multi_base}{If target is multiclass, multi_base gives the option to 
specify which class to use as the base category. If not specified the first
class will be used as the base level.}

\item{remove_high_card}{If TRUE, removes the high-cardinality variable from 
the final dataframe output. Defaults to FALSE.}

\item{mapping}{If user wants to do impact coding on testing/deployment data,
mapping will use the computed probabilities or expectations from the
development step. Only used during testing phase.}
}
\value{
A list that contains the new data frame with the probabilities or 
expectations of the high-cardinality variable/s and that also contains the 
mappings of each category level.  Mappings are used in deployment/testing.
}
\description{
pphcv stands for pre-processing of high-cardinality variables. 
It is a method to reduce high-cardinality (many categories) variables into 
probabilities of the target class or expectations of the target. This allows 
the user to utilize variables with large numbers of categories and thus 
retain much of the explanatory power of those variables. This 
framework can be used in training and testing. If used in training it will 
also need to be applied to testing data. Must be used in training in order
to be used in testing.

For binary targets, the high-cardinality variable/s will be reduced to 
probabilities of the target positive class given each high-cardinality level 
otherwise known as the conditional probability, P(Y|X=x).

For continuous targets, the high-cardinality variable/s will be reduced to 
expectations of the target variable given each high-cardinality level. Also
known as the conditional expectation, E[Y|X=x] 

For multiclass targets with n classes, each high-cardinality variable will be 
transformed into n - 1 attributes representing the probability of each target
class given each level of the high-cardinality variable. The user may specify
the base class.

This technique was taken from a paper titled,"A preprocessing Scheme for High
Cardinality Categorical Attributes in Classification and Prediction 
Problems," written by Daniele Micci-Barreca, published in ACM SIGKDD 
Explorations Newsletter, Volume 3 Issue 1, July 2001, pages 27-32. See
references.
}
\examples{
# These examples show how to pre-process training data and then apply the 
# mappings to testing data for several different parameter/ data types
# combinations

set.seed(10)
train <- data.frame(Ycontinuous = sample(5:42, size = 14, replace = TRUE),
                    Ycategorical = sample(c("Y", "N"), size = 14, 
                                       replace = TRUE, prob = c(0.45, 0.55)),
                    YCat01 = c(0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0),
                    hcX = sample(letters[1:5], size = 14, replace = TRUE),
                    hcX2 = sample(letters[6:10], size = 14, replace = TRUE),
                    hcX3 = sample(letters[11:15], size = 14, replace = TRUE),
                    Ymulticlass = sample(c("blue", "green", "red"), 
                                           size = 14, replace = TRUE))

set.seed(12)
test <- data.frame(hcX = sample(letters[1:5], size = 14, replace = TRUE),
                   hcX2 = sample(letters[6:10], size = 14, replace = TRUE),
                   hcX3 = sample(letters[11:15], size = 14, replace = TRUE))

# Continuous target and one high_cardinality variable
f <- pphcv(df = train, target = "Ycontinuous", high_card = "hcX", 
           type = "continuous", m_tuning_param = 0.5)
      
f1 <- pphcv(df = test, high_card = "hcX", mapping = f$mappings, 
            type = "continuous", remove_high_card = TRUE)
          
# Binary target and one high_cardinality variable
g <- pphcv(df = train, target = "Ycategorical", high_card = "hcX", 
           pos_class = "Y", type = "binary")
           
g1 <- pphcv(df = test, high_card = "hcX", mapping = g$mappings, 
            type = "binary")
          
# Binary target coded as numeric(0, 1) and one high-cardinality variable 
# and specifying the pos_class.
h <- pphcv(df = train, target = "YCat01", high_card = "hcX", pos_class = 1, 
           type = "binary", remove_high_card = FALSE)
h1 <- pphcv(df = test, high_card = "hcX", mapping = h$mappings, 
            type = "binary")
            
#Binary target coded as numeric(0, 1) and one high-cardinality variable and 
#not specifying the pos_class. Use type = "continuous". Should give same
#results as if type is binary and positive class is specified.
I <- pphcv(df = train, target = "YCat01",  high_card = "hcX", 
           type = "continuous")
I1 <- pphcv(df = test, high_card = "hcX", mapping = I$mappings,  
            type = "continuous")

# Multiclass target and one high-cardinality variable
j <- pphcv(df = train, target = "Ymulticlass", high_card = "hcX", 
           type = "multiclass")
j1 <- pphcv(df = test, high_card = "hcX", mapping = j$mappings, 
           type = "multiclass")
      
          
# Continuous target and several high-cardinality variables
vec <- c("hcX", "hcX2", "hcX3")
k <- pphcv(df = train, target = "Ycontinuous", high_card = vec, 
           type = "continuous", remove_high_card = FALSE)
k1 <- pphcv(df = test, high_card = vec, mapping = k$mappings, 
            type = "continuous")

# Binary target and several high_cardinality variables
vec <- c("hcX", "hcX2", "hcX3")
L <- pphcv(df = train, target = "Ycategorical", high_card = vec, 
           pos_class = "Y", type = "binary", remove_high_card = FALSE)
L1 <- pphcv(df = test, high_card = vec, mapping = L$mappings, 
            type = "binary")
            
# Multiclass target and several high-cardinality variables
vec <- c("hcX", "hcX2", "hcX3")
O <- pphcv(df = train, target = "Ymulticlass", high_card = vec, 
           type = "multiclass")
O1 <- pphcv(df = test, high_card = vec, mapping = O$mappings, 
            type = "multiclass")
}
\references{
\url{http://healthcareai-r.readthedocs.io}

\url{https://dl.acm.org/citation.cfm?id=507538}
}
\seealso{
\code{\link{healthcareai}}
}
